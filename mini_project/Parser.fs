// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


# 9 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | NEG
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | EQEQ
  | BANGEQ
  | LT
  | LE
  | GT
  | GE
  | ANDAND
  | OROR
  | LPAR
  | RPAR
  | COMMA
  | EQ
  | SEMICOLON
  | ELSE
  | FALSE
  | FUNC
  | IF
  | IN
  | LET
  | READ
  | THEN
  | TRUE
  | WRITE
  | NAME of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NEG
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EQEQ
    | TOKEN_BANGEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDAND
    | TOKEN_OROR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_SEMICOLON
    | TOKEN_ELSE
    | TOKEN_FALSE
    | TOKEN_FUNC
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_READ
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_WRITE
    | TOKEN_NAME
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_program
    | NONTERM_definition
    | NONTERM_definitions
    | NONTERM_expression
    | NONTERM_expression_list
    | NONTERM_expressions
    | NONTERM_name_list
    | NONTERM_names

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | NEG  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | MULT  -> 4 
  | DIV  -> 5 
  | MOD  -> 6 
  | EQEQ  -> 7 
  | BANGEQ  -> 8 
  | LT  -> 9 
  | LE  -> 10 
  | GT  -> 11 
  | GE  -> 12 
  | ANDAND  -> 13 
  | OROR  -> 14 
  | LPAR  -> 15 
  | RPAR  -> 16 
  | COMMA  -> 17 
  | EQ  -> 18 
  | SEMICOLON  -> 19 
  | ELSE  -> 20 
  | FALSE  -> 21 
  | FUNC  -> 22 
  | IF  -> 23 
  | IN  -> 24 
  | LET  -> 25 
  | READ  -> 26 
  | THEN  -> 27 
  | TRUE  -> 28 
  | WRITE  -> 29 
  | NAME _ -> 30 
  | INT _ -> 31 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_NEG 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_MULT 
  | 5 -> TOKEN_DIV 
  | 6 -> TOKEN_MOD 
  | 7 -> TOKEN_EQEQ 
  | 8 -> TOKEN_BANGEQ 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_LE 
  | 11 -> TOKEN_GT 
  | 12 -> TOKEN_GE 
  | 13 -> TOKEN_ANDAND 
  | 14 -> TOKEN_OROR 
  | 15 -> TOKEN_LPAR 
  | 16 -> TOKEN_RPAR 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_FALSE 
  | 22 -> TOKEN_FUNC 
  | 23 -> TOKEN_IF 
  | 24 -> TOKEN_IN 
  | 25 -> TOKEN_LET 
  | 26 -> TOKEN_READ 
  | 27 -> TOKEN_THEN 
  | 28 -> TOKEN_TRUE 
  | 29 -> TOKEN_WRITE 
  | 30 -> TOKEN_NAME 
  | 31 -> TOKEN_INT 
  | 34 -> TOKEN_end_of_input
  | 32 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_definition 
    | 4 -> NONTERM_definitions 
    | 5 -> NONTERM_definitions 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression_list 
    | 14 -> NONTERM_expression_list 
    | 15 -> NONTERM_expressions 
    | 16 -> NONTERM_expressions 
    | 17 -> NONTERM_name_list 
    | 18 -> NONTERM_name_list 
    | 19 -> NONTERM_names 
    | 20 -> NONTERM_names 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 34 
let _fsyacc_tagOfErrorTerminal = 32

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | NEG  -> "NEG" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | EQEQ  -> "EQEQ" 
  | BANGEQ  -> "BANGEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | ANDAND  -> "ANDAND" 
  | OROR  -> "OROR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | SEMICOLON  -> "SEMICOLON" 
  | ELSE  -> "ELSE" 
  | FALSE  -> "FALSE" 
  | FUNC  -> "FUNC" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | READ  -> "READ" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | WRITE  -> "WRITE" 
  | NAME _ -> "NAME" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EQEQ  -> (null : System.Object) 
  | BANGEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | OROR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 7us; 7us; 7us; 2us; 65535us; 0us; 4us; 7us; 8us; 7us; 65535us; 4us; 5us; 10us; 11us; 13us; 14us; 19us; 15us; 20us; 16us; 21us; 17us; 22us; 18us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 19us; 20us; 21us; 22us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 5us; 2us; 9us; 10us; 11us; 12us; 1us; 3us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 5us; 7us; 9us; 10us; 11us; 12us; 1us; 7us; 1us; 8us; 5us; 8us; 9us; 10us; 11us; 12us; 5us; 9us; 9us; 10us; 11us; 12us; 5us; 9us; 10us; 10us; 11us; 12us; 5us; 9us; 10us; 11us; 11us; 12us; 5us; 9us; 10us; 11us; 12us; 12us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 16us; 18us; 20us; 22us; 24us; 26us; 32us; 34us; 36us; 42us; 48us; 54us; 60us; 66us; 68us; 70us; 72us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|1us; 16388us; 22us; 6us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 4us; 16386us; 2us; 19us; 3us; 20us; 4us; 21us; 5us; 22us; 0us; 16387us; 1us; 16388us; 22us; 6us; 0us; 16389us; 0us; 16390us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 5us; 32768us; 2us; 19us; 3us; 20us; 4us; 21us; 5us; 22us; 16us; 12us; 0us; 16391us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 2us; 16392us; 4us; 21us; 5us; 22us; 2us; 16393us; 4us; 21us; 5us; 22us; 2us; 16394us; 4us; 21us; 5us; 22us; 0us; 16395us; 0us; 16396us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; 3us; 32768us; 1us; 13us; 15us; 10us; 31us; 9us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 10us; 15us; 16us; 18us; 19us; 20us; 24us; 30us; 31us; 35us; 38us; 41us; 44us; 45us; 46us; 50us; 54us; 58us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 0us; 2us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 0us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16387us; 65535us; 16389us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 279 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                             _1 
                   )
# 44 "Parser.fsy"
                 : Syntax.prog));
# 299 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.def list in
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                             Syntax.PROG (_1, _2) 
                   )
# 47 "Parser.fsy"
                 : Syntax.prog));
# 311 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                             Syntax.FUNC (* TODO *) 
                   )
# 50 "Parser.fsy"
                 : Syntax.def));
# 321 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                             [] 
                   )
# 53 "Parser.fsy"
                 : Syntax.def list));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.def in
            let _2 = parseState.GetInput(2) :?> Syntax.def list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                             _1 :: _2 
                   )
# 54 "Parser.fsy"
                 : Syntax.def list));
# 343 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                             Syntax.INT _1 
                   )
# 57 "Parser.fsy"
                 : Syntax.exp));
# 354 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                             _2 
                   )
# 58 "Parser.fsy"
                 : Syntax.exp));
# 365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                             Syntax.NEG _2 
                   )
# 59 "Parser.fsy"
                 : Syntax.exp));
# 376 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                             Syntax.ADD(_1, _3) 
                   )
# 60 "Parser.fsy"
                 : Syntax.exp));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                             Syntax.SUB(_1, _3) 
                   )
# 61 "Parser.fsy"
                 : Syntax.exp));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                             Syntax.MULT(_1, _3) 
                   )
# 62 "Parser.fsy"
                 : Syntax.exp));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                             Syntax.DIV(_1, _3) 
                   )
# 63 "Parser.fsy"
                 : Syntax.exp));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                             [_1] 
                   )
# 66 "Parser.fsy"
                 : Syntax.exp list));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 67 "Parser.fsy"
                 : Syntax.exp list));
# 447 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                             [] 
                   )
# 70 "Parser.fsy"
                 : Syntax.exp list));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                             _1 
                   )
# 71 "Parser.fsy"
                 : Syntax.exp list));
# 468 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                             [_1] 
                   )
# 74 "Parser.fsy"
                 : Syntax.variableName list));
# 479 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> Syntax.variableName list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 75 "Parser.fsy"
                 : Syntax.variableName list));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                             [] 
                   )
# 78 "Parser.fsy"
                 : Syntax.variableName list));
# 501 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.variableName list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                             _1 
                   )
# 79 "Parser.fsy"
                 : Syntax.variableName list));
|]
# 513 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 35;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Syntax.prog =
    engine lexer lexbuf 0 :?> _
